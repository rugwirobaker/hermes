// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rugwirobaker/hermes (interfaces: SendService,Pubsub,Store,IdempotencyKeyStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hermes "github.com/rugwirobaker/hermes"
)

// MockSendService is a mock of SendService interface.
type MockSendService struct {
	ctrl     *gomock.Controller
	recorder *MockSendServiceMockRecorder
}

// MockSendServiceMockRecorder is the mock recorder for MockSendService.
type MockSendServiceMockRecorder struct {
	mock *MockSendService
}

// NewMockSendService creates a new mock instance.
func NewMockSendService(ctrl *gomock.Controller) *MockSendService {
	mock := &MockSendService{ctrl: ctrl}
	mock.recorder = &MockSendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendService) EXPECT() *MockSendServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSendService) Send(arg0 context.Context, arg1 *hermes.SMS) (*hermes.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*hermes.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSendServiceMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendService)(nil).Send), arg0, arg1)
}

// MockPubsub is a mock of Pubsub interface.
type MockPubsub struct {
	ctrl     *gomock.Controller
	recorder *MockPubsubMockRecorder
}

// MockPubsubMockRecorder is the mock recorder for MockPubsub.
type MockPubsubMockRecorder struct {
	mock *MockPubsub
}

// NewMockPubsub creates a new mock instance.
func NewMockPubsub(ctrl *gomock.Controller) *MockPubsub {
	mock := &MockPubsub{ctrl: ctrl}
	mock.recorder = &MockPubsubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubsub) EXPECT() *MockPubsubMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPubsub) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPubsubMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubsub)(nil).Close))
}

// Done mocks base method.
func (m *MockPubsub) Done(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockPubsubMockRecorder) Done(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockPubsub)(nil).Done), arg0, arg1)
}

// Publish mocks base method.
func (m *MockPubsub) Publish(arg0 context.Context, arg1 hermes.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0, arg1)
}

// Publish indicates an expected call of Publish.
func (mr *MockPubsubMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubsub)(nil).Publish), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockPubsub) Subscribe(arg0 context.Context, arg1 string) (<-chan hermes.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(<-chan hermes.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubsubMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubsub)(nil).Subscribe), arg0, arg1)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockStore) Insert(arg0 context.Context, arg1 *hermes.Message) (*hermes.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*hermes.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockStoreMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStore)(nil).Insert), arg0, arg1)
}

// MessageByID mocks base method.
func (m *MockStore) MessageByID(arg0 context.Context, arg1 string) (*hermes.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageByID", arg0, arg1)
	ret0, _ := ret[0].(*hermes.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageByID indicates an expected call of MessageByID.
func (mr *MockStoreMockRecorder) MessageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageByID", reflect.TypeOf((*MockStore)(nil).MessageByID), arg0, arg1)
}

// MessageByPhone mocks base method.
func (m *MockStore) MessageByPhone(arg0 context.Context, arg1 string) (*hermes.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageByPhone", arg0, arg1)
	ret0, _ := ret[0].(*hermes.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageByPhone indicates an expected call of MessageByPhone.
func (mr *MockStoreMockRecorder) MessageByPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageByPhone", reflect.TypeOf((*MockStore)(nil).MessageByPhone), arg0, arg1)
}

// MessageBySerial mocks base method.
func (m *MockStore) MessageBySerial(arg0 context.Context, arg1 string) (*hermes.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageBySerial", arg0, arg1)
	ret0, _ := ret[0].(*hermes.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageBySerial indicates an expected call of MessageBySerial.
func (mr *MockStoreMockRecorder) MessageBySerial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageBySerial", reflect.TypeOf((*MockStore)(nil).MessageBySerial), arg0, arg1)
}

// Update mocks base method.
func (m *MockStore) Update(arg0 context.Context, arg1 *hermes.Message) (*hermes.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*hermes.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), arg0, arg1)
}

// MockIdempotencyKeyStore is a mock of IdempotencyKeyStore interface.
type MockIdempotencyKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyKeyStoreMockRecorder
}

// MockIdempotencyKeyStoreMockRecorder is the mock recorder for MockIdempotencyKeyStore.
type MockIdempotencyKeyStoreMockRecorder struct {
	mock *MockIdempotencyKeyStore
}

// NewMockIdempotencyKeyStore creates a new mock instance.
func NewMockIdempotencyKeyStore(ctrl *gomock.Controller) *MockIdempotencyKeyStore {
	mock := &MockIdempotencyKeyStore{ctrl: ctrl}
	mock.recorder = &MockIdempotencyKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyKeyStore) EXPECT() *MockIdempotencyKeyStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIdempotencyKeyStore) Create(arg0 context.Context, arg1 *hermes.IdempotencyKey) (*hermes.IdempotencyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*hermes.IdempotencyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIdempotencyKeyStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIdempotencyKeyStore)(nil).Create), arg0, arg1)
}

// Key mocks base method.
func (m *MockIdempotencyKeyStore) Key(arg0 context.Context, arg1 string) (*hermes.IdempotencyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key", arg0, arg1)
	ret0, _ := ret[0].(*hermes.IdempotencyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Key indicates an expected call of Key.
func (mr *MockIdempotencyKeyStoreMockRecorder) Key(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockIdempotencyKeyStore)(nil).Key), arg0, arg1)
}

// KeyByID mocks base method.
func (m *MockIdempotencyKeyStore) KeyByID(arg0 context.Context, arg1 int) (*hermes.IdempotencyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyByID", arg0, arg1)
	ret0, _ := ret[0].(*hermes.IdempotencyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyByID indicates an expected call of KeyByID.
func (mr *MockIdempotencyKeyStoreMockRecorder) KeyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyByID", reflect.TypeOf((*MockIdempotencyKeyStore)(nil).KeyByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockIdempotencyKeyStore) Update(arg0 context.Context, arg1 *hermes.IdempotencyKey) (*hermes.IdempotencyKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*hermes.IdempotencyKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIdempotencyKeyStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIdempotencyKeyStore)(nil).Update), arg0, arg1)
}
